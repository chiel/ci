on:
  workflow_call:
    secrets:
      github_pat:
        description: GitHub personal access token
        required: true
      kubeconfig:
        description: Kubernetes config
        required: false

jobs:
  check-secrets:
    name: Check the status of secrets
    runs-on: ubuntu-latest
    outputs:
      has-kubeconfig: ${{ steps.kubeconfig.outputs.exists }}
    steps:
      - name: Check if kubeconfig exists
        id: kubeconfig
        run: |
          if [[ "${{ secrets.kubeconfig }}" != "" ]]; then
            echo "::set-output name=exists ::true"
          else
            echo "::set-output name=exists ::false"
          fi

  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/setup-node@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          run_install: true
          version: 7

  changed:
    name: Version changed packages
    runs-on: ubuntu-latest
    needs:
      - install
    outputs:
      jobs: ${{ steps.jobs.outputs.jobs }}
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Get changed packages
        id: packages
        run: echo "::set-output name=packages ::$((pnpm exec lerna changed --loglevel silent || true) | paste -sd, -)"
      - name: Get jobs for changed packages
        if: steps.packages.outputs.packages != null
        id: jobs
        uses: chiel/action-get-jobs@v2
        with:
          packages: ${{ steps.packages.outputs.packages }}
      - name: Version changed packages
        if: steps.packages.outputs.packages != null
        run: pnpm exec lerna version --no-git-tag-version --no-push
      - name: Upload version artifacts
        if: steps.packages.outputs.packages != null
        uses: actions/upload-artifact@v3
        with:
          name: version-artifacts
          path: packages/*/package.json

  packages-build:
    name: Build changed packages
    runs-on: ubuntu-latest
    needs:
      - changed
      - install
    if: needs.changed.outputs.packages != null
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18.0'
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Build changed packages
        run: pnpm exec lerna run build --scope={,${{ needs.changed.outputs.packages }}} --include-dependencies
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: packages/*/dist

  linter-run:
    name: Run linter (${{ matrix.package.name }})
    runs-on: ubuntu-latest
    needs:
      - changed
      - install
    if: |
      needs.changed.outputs.jobs != null &&
      fromJSON(needs.changed.outputs.jobs).linter-run != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.jobs).linter-run }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Lint package ${{ matrix.package.name }}
        run: pnpm exec lerna run lint --scope=${{ matrix.package.name }}

  tests-run:
    name: Run tests (${{ matrix.package.name }})
    runs-on: ubuntu-latest
    needs:
      - changed
      - install
    if: |
      needs.changed.outputs.jobs != null &&
      fromJSON(needs.changed.outputs.jobs).tests-run != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.jobs).tests-run }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Test package ${{ matrix.package.name }}
        run: pnpm exec lerna run test --scope=${{ matrix.package.name }} -- -- --collectCoverage

  docker-lint:
    name: Lint Dockerfiles (${{ matrix.package.name }})
    runs-on: ubuntu-latest
    needs:
      - changed
    if: |
      needs.changed.outputs.jobs != null &&
      fromJSON(needs.changed.outputs.jobs).docker-lint != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.jobs).docker-lint }}
    steps:
      - uses: actions/checkout@v3
      - name: Lint Dockerfiles
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: ${{ matrix.package.path }}/Dockerfile

  docker-build:
    name: Build Dockerfiles (${{ matrix.package.name }})
    runs-on: ubuntu-latest
    needs:
      - changed
      - docker-lint
      - linter-run
      - tests-run
      - packages-build
    if: |
      always() &&
      needs.changed.outputs.jobs != null &&
      fromJSON(needs.changed.outputs.jobs).docker-build != null &&
      needs.packages-build.result == 'success' &&
      needs.docker-lint.result == 'success' &&
      (needs.linter-run.result == 'success' || needs.linter-run.result == 'skipped') &&
      (needs.tests-run.result == 'success' || needs.tests-run.result == 'skipped')
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.jobs).docker-build }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: packages
      - name: Determine version
        id: version
        run: |
          VERSION="v$(jq -r .version ${{ matrix.package.path }}/package.json)"
          echo "::set-output name=version ::$VERSION"
      - name: Log into GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github_pat }}
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.ref == 'refs/heads/master' }}
          tags: ghcr.io/${{ github.repository }}/${{ matrix.package.bareName }}:${{ steps.version.outputs.version }}
          context: ${{ matrix.package.path }}

  kubernetes-deploy:
    name: Deploy to Kubernetes (${{ matrix.package.name }})
    runs-on: ubuntu-latest
    needs:
      - check-secrets
      - changed
      - docker-build
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.check-secrets.outputs.has-kubeconfig == 'true' &&
      needs.changed.outputs.jobs != null &&
      fromJSON(needs.changed.outputs.jobs).kubernetes-deploy != null &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped')
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.jobs).kubernetes-deploy }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-kubectl@v2.1
      - uses: actions/download-artifact@v3
        with:
          name: version-artifacts
          path: packages
      - uses: actions/download-artifact@v3
        with:
          name: deploy-env
        continue-on-error: true
      - name: Generate kubernetes manifest
        run: |
          [[ -f deploy.env ]] && source deploy.env
          export RELEASE="v$(jq -r .version ${{ matrix.package.path }}/package.json)"
          envsubst < ${{ matrix.package.path }}/.k8s.template.yaml >> ${{ matrix.package.path }}/.k8s.yaml
      - name: Create .kubeconfig
        run: echo "${{ secrets.kubeconfig }}" > .kubeconfig
      - name: Apply kubernetes manifests
        run: kubectl --kubeconfig=.kubeconfig apply -f ${{ matrix.package.path }}/.k8s.yaml

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - changed
      - packages-build
      - docker-lint
      - docker-build
      - linter-run
      - tests-run
      - kubernetes-deploy
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.changed.outputs.packages != null &&
      needs.packages-build.result == 'success' &&
      (needs.docker-lint.result == 'success' || needs.docker-lint.result == 'skipped') &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped') &&
      (needs.linter-run.result == 'success' || needs.linter-run.result == 'skipped') &&
      (needs.tests-run.result == 'success' || needs.tests-run.result == 'skipped') &&
      (needs.kubernetes-deploy.result == 'success' || needs.kubernetes-deploy.result == 'skipped')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          path: '**/node_modules'
      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: packages
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
      - name: Configure CI git user
        run: |
          # publish as github actions bot - see https://api.github.com/users/github-actions%5Bbot%5D
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Version and commit packages
        run: pnpm exec lerna version
      - name: Set GitHub Packages auth token
        run: |
          echo '//npm.pkg.github.com/:_authToken=${{ secrets.github_pat }}' >> .npmrc
          git update-index --assume-unchanged .npmrc
      - name: Publish packages
        run: pnpm exec lerna publish from-git --no-verify-access
